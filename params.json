{"name":"Rapidandroidapp","tagline":"Abstract, easy, quick, flexible and extendable Rapid Android development","body":"RAD Android App\r\n==================================\r\n\r\n## Tools\r\nAndroid Studio 0.8.x and Gradle 2.x\r\n\r\n## IDE Tools\r\n* [Dagger Plugin] (https://github.com/square/dagger-intellij-plugin)\r\n* [Android ButterKnife Zelezny] (http://plugins.jetbrains.com/plugin/7369)\r\n\r\n## Libraries\r\n* [Active Android 3.1.10](https://github.com/pardom/ActiveAndroid)\r\n* [Retrofit 1.7.0](http://square.github.io/retrofit/)\r\n* [OkHttp 2.0.0](http://square.github.io/okhttp/)\r\n* [Otto Eventbus 1.3.5](http://square.github.io/otto/)\r\n* [Dagger 1.2.2](http://square.github.io/dagger/)\r\n* [ButterKnife 5.1.2](https://github.com/JakeWharton/butterknife)\r\n* [Otto Picasso 2.3.2] (http://square.github.io/picasso/)\r\n* [UI validation library Saripaar](https://github.com/ragunathjawahar/android-saripaar)\r\n\r\n## 3rd Parties Social\r\n* Facebook SDK as a git module\r\n\r\n## Implemented\r\n\r\n### Gradle\r\n* Gradle configuration for multi-environment support\r\n\r\n### Environment Manager\r\n* Multi-environment support (```LIVE```, ```STAGING```, ```UAT```)\r\n* Decides the environment for the current build\r\n* Decides the app's base API URL for the current build\r\n* Decides the app's API logging level for the current build\r\n\r\n### SQLite Database\r\n* ```DBModel``` class to extend for each Object/Model you want to have access in database.\r\n* Public methods for SQL operations (```findOne(Long id)```, ```findAll()```, ```deleteOne(Long id)``` ,```deleteAll```)\r\n* Quick Methods for a new ```Select``` and ```Delete``` Query\r\n\r\n### API Managers\r\n* OkHttpClient support to make the HTTP requests for API\r\n* ```AbstractApiManager``` with Retrofit based on the Environment manager API URL\r\n* ```FULL/NONE``` logging for API based on the Environment manager ```LOGLEVEL``` of API\r\n* AbstractAsyncTask which produces events\r\n* Event Base architecture with Otto for each response after an ```AbstractAsyncTask```\r\n* Access to API methods via Reflection. The only thing you must set up is the ```ApiRequestAttrs```. Example in wiki\r\n\r\n### Activities\r\n* ButterKnife injection to use this -> ```@InjectView(R.id.btnTest)``` to minimize and remove the old ```(Button) findViewById(R.id.btnTest)```\r\n* Each Activity/FragmentActivity registered to listen the Event BUS\r\n* Customizable/Overridable action bar for each Activity/FragmentActivity","google":"UA-56813628-1","note":"Don't delete this file! It's used internally to help with page regeneration."}