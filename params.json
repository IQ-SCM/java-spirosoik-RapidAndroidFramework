{"name":"Rapidandroidapp","tagline":"Abstract, easy, quick, flexible and extendable Rapid Android development","body":"Rapid Android Development Template\r\n==================================\r\n\r\n## Tools\r\nAndroid Studio 0.8.x and Gradle 2.x\r\n\r\n## IDE Tools\r\n* [Dagger Plugin](https://github.com/square/dagger-intellij-plugin)\r\n* [Android ButterKnife Zelezny](http://plugins.jetbrains.com/plugin/7369)\r\n\r\n## Libraries\r\n* [Active Android 3.1.10](https://github.com/pardom/ActiveAndroid)\r\n* [Retrofit 1.7.0](http://square.github.io/retrofit/)\r\n* [OkHttp 2.0.0](http://square.github.io/okhttp/)\r\n* [Otto Eventbus 1.3.5](http://square.github.io/otto/)\r\n* [Dagger 1.2.2](http://square.github.io/dagger/)\r\n* [ButterKnife 5.1.2](https://github.com/JakeWharton/butterknife)\r\n* [Otto Picasso 2.3.2](http://square.github.io/picasso/)\r\n\r\n## Future Integration\r\n* [UI validation library Saripaar](https://github.com/ragunathjawahar/android-saripaar)\r\n\r\n\r\n## 3rd Parties Social\r\n* [Facebook SDK as a git module](https://github.com/facebook/facebook-android-sdk)\r\n\r\n\r\n## Example how to use SQLite Databse\r\nFor quick and easy access to the database, it have been used the ActiveRecord pattern via the ActiveAndroid Library. Into the source code there is a class ``` DBModel<T>``` which can be used from any OBject/class which want to have access to the SQLite Database. The ```DBModel<T> extends Model``` which includes all the necessary methods for accessing the database as ```load, save, delete, getId```. \r\n\r\nThe ```DBModel<T>``` class includes some extra methods according to the type ```<T>``` and some helpers which can be used and they are the followings:\r\n\r\n* ```DBModel findOne(Long id)```          -> Returns the record according to the requested ```id``` \r\n* ```List<? extends DBModel> findAll()``` -> Returns all the records of the current ```DBModel<T>``` \r\n* ```void deleteOne(Long id)```           -> Deletes the record according to the requested ```id``` \r\n* ```void deleteAll()```                  -> Deletes all the records of the current ```DBModel<T>```\r\n* ```Select selectQuery()```              -> Returns an instance of ```Select``` ActiveAndroid (reduce the new Object)\r\n* ```Delete deleteQuery()```              -> Returns an instance of ```Delete``` ActiveAndroid(reduce the new Object)\r\n\r\neg. Let's assume that we have a ```User``` object which must be saved/selected/updated/delete into the SQLite Database.\r\n\r\n```java\r\n@Table(name = 'user')\r\npublic class User extends DBModel<User> {\r\n\r\n    @Column(name = \"email\", index = true, unique = true)\r\n    public String email;\r\n\r\n    @Column(name = \"fname\")\r\n    public String fname;\r\n\r\n    @Column(name = \"lname\")\r\n    public String lname;\r\n\r\n    @Column(name = \"avatar\")\r\n    public String avatar;\r\n\r\n    public User() {\r\n    }\r\n}\r\n```\r\n\r\nWe have our Database Model and now we want to access to the database. In this point I want to note that in the ```DBModel``` has implemented the Singletton Holder pattern in order to avoid multiple instances of the same ```DBModel<T>```.  \r\n\r\n* Get all available users: <br/>\r\n```java\r\nList<User> users = (List<User>) DBModel.getInstance(User.class).findAll();\r\n```\r\n* Get the available user by id: <br/>\r\n```java\r\nUser searchUser = (User) DBModel.getInstance(User.class).findOne(21L);\r\n```\r\n* Inserts a user into table: <br/>\r\n```java\r\nUser user = new User();\r\nuser.avatar = \"foo_bar.jpg\";\r\nuser.email  = \"foo_bar@test.com\";\r\nuser.lname  = \"Bar\";\r\nuser.fname  = \"Foo\";\r\nuser.save();\r\n```\r\n* Updates a user: <br/>\r\n```java\r\nUser searchUser = (User) DBModel.getInstance(User.class).findOne(21L);\r\nsearchUser.fname  = \"FooUpdate\";\r\nsearchUser.save();\r\n```\r\n* Delete all users: <br/>\r\n```java\r\nDBModel.getInstance(User.class).deleteAll();\r\n```\r\n* Delete a user by id: <br/>\r\n```java\r\nDBModel.getInstance(User.class).deleteOne(21L);\r\n```\r\n\r\nTo be contiuned with details for API requests. Stay tuned :)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}