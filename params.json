{"name":"Rapidandroidapp","tagline":"Abstract, easy, quick, flexible and extendable Rapid Android development","body":"Rapid Android Development Template\r\n==================================\r\n\r\n* **master:** [![Build Status](https://circleci.com/gh/spirosoik/RapidAndroidApp/tree/master.svg?style=shield&circle-token=7cefb05d9be631244a292f24a1eb2da96660a21d)](https://circleci.com/gh/spirosoik/RapidAndroidApp/tree/master)\r\n\r\n## Tools\r\nAndroid Studio 0.8.x and Gradle 2.x\r\n\r\n## IDE Tools\r\n* [Dagger Plugin] (https://github.com/square/dagger-intellij-plugin)\r\n* [Android ButterKnife Zelezny] (http://plugins.jetbrains.com/plugin/7369)\r\n\r\n## Libraries\r\n* [Active Android 3.1.10](https://github.com/pardom/ActiveAndroid)\r\n* [Retrofit 1.9.0](http://square.github.io/retrofit/)\r\n* [OkHttp 2.4.0](http://square.github.io/okhttp/)\r\n* [Otto Eventbus 1.3.8](http://square.github.io/otto/)\r\n* [Dagger 1.2.2](http://square.github.io/dagger/)\r\n* [ButterKnife 6.1.0](https://github.com/JakeWharton/butterknife)\r\n* [Otto Picasso 2.5.2] (http://square.github.io/picasso/)\r\n* [UI validation library Saripaar](https://github.com/ragunathjawahar/android-saripaar)\r\n\r\n## 3rd Parties Social (as gradle imports)\r\n* Facebook SDK\r\n* Twitter SDK by Fabric\r\n* Crashlytics SDK by Fabric\r\n\r\nNote: You can change the keys into ```api_keys.xml```. For Crashlytics you can change it into ```AndroidManifest.xml```. There is a ```SocialManager``` class\r\nto use for social actions.\r\n\r\n## Check the documentation\r\n\r\n* [Wiki](https://github.com/spirosoik/RapidAndroidApp/wiki)\r\n\r\n## Testing\r\n* Robolectric for unit testing\r\n* JaCoCo coverage testing\r\n* Shell scripts to run tests fast. Check ```scripts``` folder.\r\n* CircleCI continuous integration server\r\n* Calabash (SOON)\r\n\r\n## Proguard\r\n* Proguard enable for ```LIVE```, ```UAT``` environments to minify the build\r\n\r\n\r\n### Gradle\r\n* Gradle configuration for multi-environment support\r\n\r\n### Environment Manager\r\n* Multi-environment support (```LIVE```, ```UAT```, ```STAGING```)\r\n* Assigns dynamically environment for the current build\r\n* Assigns dynamically the API URL for the current build\r\n* Assigns dynamically the API logging level for the current build\r\n* Assigns dynamically the logging level for the current build\r\n* Decides if the app according to the environment can track in analytics\r\n* Decides if the app according to the environment can receive notifications\r\n* Decides if the app according to the environment can track bugs in crashlytics\r\n\r\n### API Managers\r\n* OkHttpClient support to make the HTTP requests for API\r\n* ```AbstractApiManager``` with Retrofit based on the Environment manager API URL\r\n* ```FULL/NONE``` logging for API based on the Environment manager ```LOGLEVEL``` of API\r\n* AbstractAsyncTask which produces events in a public BUS\r\n* Event Base architecture with Otto for each response after an ```AbstractAsyncTask```\r\n* Access to API methods via Reflection. The only thing you must set up is the ```ApiRequestAttrs```. Example in wiki\r\n\r\n### Activities\r\n* Dagger for dependency injection\r\n* ButterKnife views injection to use this -> ```@InjectView(R.id.btnTest)``` to minimize and remove the old ```(Button) findViewById(R.id.btnTest)```\r\n* Each Activity/FragmentActivity registered to listen the Event BUS\r\n* Customizable/Overridable action bar for each Activity/FragmentActivity\r\n* ```AbstractFragmentActivity``` to extended by each Fragment activity and it can contains the fragment you want. You must implement only the createFragment method\r\n* ```BaseFragment``` to be extended by each fragment as generic fragment\r\n\r\n### Google Analytics\r\n* Support for google analytics track events and pageviews. Use ```AnalyticsManager```","google":"UA-56813628-1","note":"Don't delete this file! It's used internally to help with page regeneration."}